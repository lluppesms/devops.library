# ----------------------------------------------------------------------------------------------------
# Template to deploy Azure Resources in a bicep file in one environment
# ----------------------------------------------------------------------------------------------------
parameters:
- name: environmentName
  default: 'DEV'
- name: templateFolderName
  default: 'infra\Bicep'
- name: templateFileName
  default: 'main.bicep'
- name: parameterFileName
  default: 'main.parameters.json'

# ----------------------------------------------------------------------------------------------------
jobs:
- deployment: CreateInfra
  displayName: Initialize Create Infra
  environment: ${{ parameters.environmentName }}

- job: CreateInfraJob
  displayName: Create Infrastructure
  variables:
    - name: environmentNameUpper
      value: ${{ upper(parameters.environmentName) }}
    - name: environmentNameLower
      value: ${{ lower(parameters.environmentName) }}
    # If you use Windows Build agents, use the \ delimter, if Ubuntu Linux, use the / delimiter
    - name: templateFile
      value: '$(Pipeline.Workspace)\s\${{ parameters.templateFolderName }}\${{ parameters.templateFileName }}'
    - name: parameterFile
      value: '$(Pipeline.Workspace)\s\${{ parameters.templateFolderName }}\${{ parameters.parameterFileName }}'
    - name: compiledJsonFile
      value: '${{ parameters.templateFolderName }}\compiled.json'
    # Linux version of variables
    # - name: templateFile
    #   value: '$(Pipeline.Workspace)/s/${{ parameters.templateFolderName }}/${{ parameters.templateFileName }}'
    # - name: parameterFile
    #   value: '$(Pipeline.Workspace)/s/${{ parameters.templateFolderName }}/${{ parameters.parameterFileName }}'
    # - name: compiledJsonFile
    #   value: '${{ parameters.templateFolderName }}/compiled.json'

  steps:
  - bash: |
      appNameLower=$(echo "$(appName)" | tr '[:upper:]' '[:lower:]')
      echo "appName=$(appName)"
      echo "appNameLower=$appNameLower"
      echo "##vso[task.setvariable variable=appNameLower]$appNameLower"

      resourceGroupName=$(echo "$(resourceGroupPrefix)_$(environmentNameLower)" | tr '[:upper:]' '[:lower:]')
      echo "resourceGroupName=$resourceGroupName"
      echo "##vso[task.setvariable variable=resourceGroupName]$resourceGroupName"
      
      runDateTime=$(echo $(date '+%Y%m%d-%H%M%S'))
      echo "##vso[task.setvariable variable=runDateTime]$runDateTime"
      echo "runDateTime=$runDateTime"
                                   
      runDateTimeZ=$(echo $(date '+%Y%m%dT%H%M%SZ'))
      echo "##vso[task.setvariable variable=runDateTimeZ]$runDateTimeZ"
      echo "runDateTimeZ=$runDateTimeZ"
    displayName: 'Create Variables'
    continueOnError: true

  - task: Bash@3
    displayName: 'Display Variables'
    continueOnError: true
    inputs:
      targetType: 'inline'
      script: 'env | sort'
    # this script version also works
    # - script: |
    #     for var in $(compgen -e); do
    #       echo $var ${!var};
    #     done
    # and this PowerShell Script works too
    # - task: PowerShell@2
    #   inputs:
    #     targetType: 'inline'
    #     script: Get-ChildItem -Path Env:\ | Format-List

  # - bash: |
  #     echo "Directory of pipeline workspace:"
  #     tree $(Pipeline.Workspace)
  #   displayName: 'Display Files (Linux)'
  #   condition: eq(variables['AGENT.OS'], 'Linux')
  #   continueOnError: true
  - task: CmdLine@2
    inputs:
      script: |
        echo "Tree and files in pipeline workspace:"
        tree $(Pipeline.Workspace)
        dir $(Pipeline.Workspace) /s
    displayName: 'Display Files (Windows)'
    #condition: eq(variables['AGENT.OS'], 'Windows_NT')
    continueOnError: true

  # Login is needed if you are pulling Bicep files from an Azure Container Registry
  # -script: az login --service-principal -u $(principalId) -p $(clientSecret) --tenant $(tenantId)
  #   displayName: 'az login'

  - task: qetza.replacetokens.replacetokens-task.replacetokens@3
    displayName: 'Create Parameter File'
    inputs:
      targetFiles: $(parameterFile)
      tokenPrefix: '#{'
      tokenSuffix: '}#'

  - task: AzureCLI@2
    displayName: 'Create Resource Group'
    inputs:
      azureSubscription: $(serviceConnectionName)
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: az group create --name $(resourceGroupName) --location $(location) --tags LastDeployed=$(runDateTime) Application=$(appName) Environment=$(environmentNameUpper)

  - task: AzureResourceManagerTemplateDeployment@3
    displayName: 'Publish Bicep Resources'
    inputs:
      csmFile: $(templateFile)
      csmParametersFile: $(parameterFile)
      deploymentScope: 'Resource Group'
      azureResourceManagerConnection: $(serviceConnectionName)
      action: 'Create Or Update Resource Group'
      resourceGroupName: '$(resourceGroupName)'
      location: '$(location)'
      templateLocation: 'Linked artifact'
      deploymentMode: 'Incremental'

  # - bash: |
  #     echo "WIPED!" > $(parameterFile)
  #   displayName: 'Wipe Parameters (Linux)'
  #   condition: and(always(), eq(variables['AGENT.OS'], 'Linux'))
  - task: CmdLine@2
    inputs:
      script: |
        echo "WIPED!" > $(parameterFile)
    displayName: 'Wipe Parameters (Windows)'
    condition: always()
    #condition: and(always(), eq(variables['AGENT.OS'], 'Windows_NT'))
    continueOnError: true
