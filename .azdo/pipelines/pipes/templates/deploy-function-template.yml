# ----------------------------------------------------------------------------------------------------
# Template to deploy a pre-built Azure Function artifact to one environment
# ----------------------------------------------------------------------------------------------------
parameters: 
- name: environmentName
  default:  'DEV'
- name: pipelineResourceIdentifier # supplied if this is deployed with artifacts from another pipeline
  default: '' # internal identifier for the resource

# ----------------------------------------------------------------------------------------------------
jobs:
- deployment: InitializeDeploy${{ parameters.environmentName }}Function
  displayName: Initialize Deploy ${{ parameters.environmentName }} Function
  environment: ${{ parameters.environmentName }}

- job: Deploy${{ parameters.environmentName }}Function
  displayName: Deploy ${{ parameters.environmentName }} Function
  variables:
    # Bring in environment common variable file
    - template: ../../vars/var-common.yml
    - template: ../../vars/var-source-location-app.yml
    # Bring in environment specific variable files
    - ${{ if eq(lower(parameters.environmentName), 'demo') }}:
      - template: ../../vars/var-demo.yml
    - ${{ if eq(lower(parameters.environmentName), 'dev') }}:
      - template: ../../vars/var-dev.yml
    - ${{ if eq(lower(parameters.environmentName), 'qa') }}:
      - template: ../../vars/var-qa.yml
    - ${{ if eq(lower(parameters.environmentName), 'prod') }}:
      - template: ../../vars/var-prod.yml
    - name: environmentName
      value: ${{ parameters.environmentName }}
    - name: pipelineResourcePath
      value: '$(Pipeline.Workspace)/${{ parameters.pipelineResourceIdentifier }}'
    - name: pipelineResourceDropPath
      value: '$(Pipeline.Workspace)/${{ parameters.pipelineResourceIdentifier }}/drop'

  steps:
  - bash: |
      functionAppName=$(echo "$(appName)-$(environmentName)" | tr '[:upper:]' '[:lower:]')
      echo "##vso[task.setvariable variable=functionAppName]$functionAppName"
      echo "----------------------------------------"
      echo "##[group]Display All Environment Variables:"
      printenv | sort
      echo "##[endgroup]"
    displayName: 'Create Variables'

  # ----------------------------------------------------------------------------------------------------
  # if a Pipeline Resource was NOT supplied, then the artifact was built inline - just download it
  # ----------------------------------------------------------------------------------------------------
  - ${{ if eq(parameters.pipelineResourceIdentifier, '') }}:
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Pipeline Artifacts'
      inputs:
        artifact: drop

  # ----------------------------------------------------------------------------------------------------
  # else if a Pipeline Resource WAS supplied, then show info about the it and copy it over (previously built elsewhere)
  # ----------------------------------------------------------------------------------------------------
  - ${{ if ne(parameters.pipelineResourceIdentifier, '') }}:
    - download: ${{ parameters.pipelineResourceIdentifier }}
      displayName: Download Artifact Files
      
    - task: CmdLine@2
      inputs:
        script: |
          echo "Build Artifact Name: ${{ parameters.pipelineResourceIdentifier }}"
          echo "pipelineResourcePath: $(pipelineResourcePath)"
          echo "pipelineResourceDropPath: $(pipelineResourceDropPath)"
          echo "projectID: $(resources.pipeline.${{ parameters.pipelineResourceIdentifier }}.projectID)"
          echo "pipelineName: $(resources.pipeline.${{ parameters.pipelineResourceIdentifier }}.pipelineName)"
          echo "pipelineID: $(resources.pipeline.${{ parameters.pipelineResourceIdentifier }}.pipelineID)"
          echo "runName: $(resources.pipeline.${{ parameters.pipelineResourceIdentifier }}.runName)"
          echo "runID: $(resources.pipeline.${{ parameters.pipelineResourceIdentifier }}.runID)"
          echo "runURI: $(resources.pipeline.${{ parameters.pipelineResourceIdentifier }}.runURI)"
          echo "sourceBranch: $(resources.pipeline.${{ parameters.pipelineResourceIdentifier }}.sourceBranch)"
          echo "sourceCommit: $(resources.pipeline.${{ parameters.pipelineResourceIdentifier }}.sourceCommit)"
          echo "sourceProvider: $(resources.pipeline.${{ parameters.pipelineResourceIdentifier }}.sourceProvider)"
          echo "requestedFor: $(resources.pipeline.${{ parameters.pipelineResourceIdentifier }}.requestedFor)"
          echo "requestedForID: $(resources.pipeline.${{ parameters.pipelineResourceIdentifier }}.requestedForID)"
          echo "----------------------------------------"
          echo "##[group]Display All Environment Variables:"
          printenv | sort
          echo "##[endgroup]"
          echo "----------------------------------------"
          echo "##[group]Directory of $(pipelineResourcePath):"
          tree -L 4 $(Build.SourcesDirectory)
          echo "##[endgroup]"
      displayName: 'Display Artifact Info'
      continueOnError: true

    - task: CopyFiles@2
      displayName: Copy Artifact Package to Root
      inputs:
        sourceFolder: '$(pipelineResourceDropPath)'
        targetFolder: '$(Pipeline.Workspace)'

  # ----------------------------------------------------------------------------------------------------
  # /end - if a Pipeline Resource...
  # ----------------------------------------------------------------------------------------------------

  - task: CmdLine@2
    displayName: 'Display Variables and Tree'
    inputs:
      script: |
        echo "Environment Specific Variables:"
        echo "  applicationCommonName=$(applicationCommonName)"
        echo "  envSpecificServiceEndpointName=$(envSpecificServiceEndpointName)"
        echo "serviceConnectionName=$(serviceConnectionName)"
        echo "azureSubscription=$(azureSubscription)"
        echo "environmentName=$(environmentName)"
        echo "functionAppName=$(functionAppName)"
        echo "----------------------------------------"
        echo "##[group]Display All Environment Variables:"
        printenv | sort
        echo "##[endgroup]"
        echo "----------------------------------------"
        echo "##[group]Directory of pipeline workspace:"
        tree -L 4 $(Pipeline.Workspace)
        echo "##[endgroup]"
    continueOnError: true

  - task: AzureFunctionApp@1
    displayName: 'Function App Deploy'
    retryCountOnTaskFailure: 2
    inputs:
      azureSubscription: $(azureSubscription)
      appType: functionAppLinux
      appName: $(functionAppName)
      package: $(Pipeline.Workspace)/*.zip
