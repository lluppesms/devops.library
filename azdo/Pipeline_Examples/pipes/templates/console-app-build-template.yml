# ------------------------------------------------------------------------------------------------------------------------
# Pipeline to build Test Utility; compiles for both Windows (x64) and Linux; copies EXE to storage for downloading ease
# ------------------------------------------------------------------------------------------------------------------------
# Note 1: In order to sign the code, this job needs the VariableGroup "CodeSigning" to work 
#   The "CodeSigning" Variable Group should have these values:
#     SubscriptionName: <ServiceConnectionName -> SubscriptionName -> for AzFileCopy>
#     KeyVaultUrl: https://<yourCertVaultName>.vault.azure.net/
#     CertName: <Signing Cert Name>
#     SigningAppRegAppId: <App Id that can read the vault>
#     SigningAppRegClientSecret: <secret>
#     ActiveDirectoryTenantId: <AD Tenant for the App Id>
#     TimestampUrl: http://timestamp.digicert.com
# ------------------------------------------------------------------------------------------------------------------------
# Note 2: To add variable group to Pipeline: go to Edit -> Edit Triggers to open detail editor -> add via Variables tab
# ------------------------------------------------------------------------------------------------------------------------
# Note 3: In order for AzFileCopy to work, you need to find the account that runs this pipeline, then add account
#   to the storage account role "Storage Blob Data Owner"
# ------------------------------------------------------------------------------------------------------------------------
# Note 4: To create this variable group, open a Cloud shell and run these commands:
#   az login
#   az devops configure --defaults organization=https://dev.azure.com/yourorg/
#   az devops configure --defaults project='yourProjectName'
#   az pipelines variable-group create --name CodeSigning --variables SubscriptionName=<serviceConnectionName> KeyVaultUrl=https://<yourCertVaultName>.vault.azure.net/ CertName=<certName> SigningAppRegAppId=<appId> SigningAppRegClientSecret=<clientSecret> ActiveDirectoryTenantId=<tenantId> TimestampUrl=: http://timestamp.digicert.com
# ------------------------------------------------------------------------------------------------------------------------
parameters:
- name: variableGroupName
  default: 'myVariableGroupName'
- name: environmentName
  default:  'DEV'

# ------------------------------------------------------------------------------------------------------------------------
jobs:
  - job: Build

    variables:
      - group: CodeSigning
      - name: solution
        value: 'Durable.Tester/*.sln'
      - name: buildPlatform
        value: 'Any CPU'
      - name: exeName
        value: Durable.Tester
      - name: buildConfiguration
        value: 'Release'

    steps:
    - task: NuGetToolInstaller@1

    - task: DotNetCoreCLI@2
      displayName: 'Install AzureSignTool'
      inputs:
        command: custom
        custom: tool
        arguments: 'install --global azuresigntool'
      continueOnError: true
  
    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solution)'

    - task: VSBuild@1
      displayName: 'Build Program'
      inputs:
        solution: '$(solution)'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

    #- task: VSTest@2
    #  displayName: 'Test Program'
    #  inputs:
    #    platform: '$(buildPlatform)'
    #    configuration: '$(buildConfiguration)'
    #  continueOnError: true

    - task: DotNetCoreCLI@2
      displayName: Create win-x64 package
      inputs:
        command: publish
        projects: '$(solution)'
        packDirectory: 
        publishWebProjects: false
        arguments: '--configuration $(BuildConfiguration) /p:PublishSingleFile=true --self-contained -f net6.0 -r win-x64 --output $(build.artifactstagingdirectory)/packages'
        zipAfterPublish: false

    - task: CmdLine@2
      displayName: 'Show Directory List'
      inputs:
        script: |
          echo "Directory of pipeline workspace:"
          tree $(Pipeline.Workspace)
      continueOnError: true

    - task: PowerShell@2
      displayName: 'Sign win-x64 application'
      inputs:
        targetType: 'inline'
        script: |
          cd $(build.artifactstagingdirectory)/packages
          azuresigntool sign Durable.Tester/$(exeName).exe -kvu $(KeyVaultUrl) -kvi $(SigningAppRegAppId) -kvs $(SigningAppRegClientSecret) -kvt $(ActiveDirectoryTenantId) -kvc $(CertName) -tr $(TimestampUrl) -v
      continueOnError: true

    - task: PowerShell@2
      displayName: Move win-x64 package to Deploy Folder
      inputs:
        targetType: 'inline'
        script: |
          cd $(build.artifactstagingdirectory)/packages
          md Deploy
          cd Deploy
          md win-x64
          cd ..
          move Durable.Tester/$(exeName).exe $(build.artifactstagingdirectory)/packages/Deploy/win-x64/
        errorActionPreference: 'continue'
        failOnStderr: false

    - task: DotNetCoreCLI@2
      displayName: Create Linux package
      inputs:
        command: publish
        projects: '$(solution)'
        publishWebProjects: false
        arguments: '--configuration $(BuildConfiguration) /p:PublishSingleFile=true --self-contained -f net6.0 -r linux-x64 --output $(build.artifactstagingdirectory)/packages'
        zipAfterPublish: false

    - task: PowerShell@2
      displayName: Move Linux package to Deploy Folder
      inputs:
        targetType: 'inline'
        script: |
          cd $(build.artifactstagingdirectory)/packages
          cd Deploy
          md Linux
          cd ..
          move Durable.Tester/$(exeName) $(build.artifactstagingdirectory)/packages/Deploy/Linux/
        errorActionPreference: 'continue'
        failOnStderr: false

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Deployed Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/packages/Deploy'
